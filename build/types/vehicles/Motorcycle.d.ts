import * as CANNON from 'cannon';
import * as THREE from 'three';
import { Vehicle } from './Vehicle';
import { IControllable } from '../interfaces/IControllable';
import { EntityType } from '../enums/EntityType';
export declare class Motorcycle extends Vehicle implements IControllable {
    entityType: EntityType;
    drive: string;
    get speed(): number;
    private _speed;
    private fuel;
    private steeringWheel;
    private airSpinTimer;
    private steeringSimulator;
    private gear;
    private brakeForce;
    private shiftTimer;
    private timeToShift;
    private canTiltForwards;
    private characterWantsToExit;
    carObject: THREE.Object3D;
    inMechShop: boolean;
    private handbrakeUsed;
    sound: any;
    private rpm;
    private shiftReducer;
    initiated: boolean;
    updated: boolean;
    audioSrc: any;
    hasStarted: boolean;
    spoilerPart: any;
    intakePart: any;
    frontBumperPart: any;
    backBumperPart: any;
    sideBumperPartL: any;
    sideBumperPartR: any;
    bodyPart: any;
    doorLeftPart: any;
    doorRightPart: any;
    seatsPart: any;
    isCustomizable: boolean;
    constructor(gltf: any);
    noDirectionPressed(): boolean;
    findAudioSource(): void;
    toggleBars(event: any): void;
    toggleSideBars(event: any): void;
    toggleIntakes(event: any): void;
    toggleSpoiler(event: any): void;
    toggleNeon(event: any): void;
    changeColor(): void;
    audioDriver(clip: any): void;
    update(timeStep: number): void;
    shiftUp(): void;
    shiftDown(): void;
    physicsPreStep(body: CANNON.Body, car: Motorcycle): void;
    onInputChange(): void;
    inputReceiverInit(): void;
    fuelUpVehicle(): void;
    readCarData(gltf: any): void;
}
