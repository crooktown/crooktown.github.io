import * as THREE from 'three';
import * as CANNON from 'cannon';
import { KeyBinding } from '../core/KeyBinding';
import { VectorSpringSimulator } from '../physics/spring_simulation/VectorSpringSimulator';
import { RelativeSpringSimulator } from '../physics/spring_simulation/RelativeSpringSimulator';
import { ICharacterAI } from '../interfaces/ICharacterAI';
import { World } from '../world/World';
import { ClothingStore } from '../world/ClothingStore';
import { IControllable } from '../interfaces/IControllable';
import { ICharacterState } from '../interfaces/ICharacterState';
import { IWorldEntity } from '../interfaces/IWorldEntity';
import { VehicleSeat } from '../vehicles/VehicleSeat';
import { Vehicle } from '../vehicles/Vehicle';
import { CapsuleCollider } from '../physics/colliders/CapsuleCollider';
import { VehicleEntryInstance } from './VehicleEntryInstance';
import { GroundImpactData } from './GroundImpactData';
import { EntityType } from '../enums/EntityType';
import { Mission } from '../dialogue/Mission';
export declare class Character extends THREE.Object3D implements IWorldEntity {
    updateOrder: number;
    entityType: EntityType;
    height: number;
    tiltContainer: THREE.Group;
    modelContainer: THREE.Group;
    materials: THREE.Material[];
    parachute: THREE.Object3D;
    mixer: THREE.AnimationMixer;
    animations: any[];
    seats: VehicleSeat[];
    acceleration: THREE.Vector3;
    velocity: THREE.Vector3;
    arcadeVelocityInfluence: THREE.Vector3;
    velocityTarget: THREE.Vector3;
    arcadeVelocityIsAdditive: boolean;
    defaultVelocitySimulatorDamping: number;
    defaultVelocitySimulatorMass: number;
    velocitySimulator: VectorSpringSimulator;
    moveSpeed: number;
    angularVelocity: number;
    orientation: THREE.Vector3;
    orientationTarget: THREE.Vector3;
    defaultRotationSimulatorDamping: number;
    defaultRotationSimulatorMass: number;
    rotationSimulator: RelativeSpringSimulator;
    viewVector: THREE.Vector3;
    actions: {
        [action: string]: KeyBinding;
    };
    characterCapsule: CapsuleCollider;
    isOtherPlayer: boolean;
    rayResult: CANNON.RaycastResult;
    rayHasHit: boolean;
    rayCastLength: number;
    raySafeOffset: number;
    wantsToJump: boolean;
    initJumpSpeed: number;
    groundImpactData: GroundImpactData;
    raycastBox: THREE.Mesh;
    world: World;
    charState: ICharacterState;
    behaviour: ICharacterAI;
    controlledObject: IControllable;
    occupyingSeat: VehicleSeat;
    vehicleEntryInstance: VehicleEntryInstance;
    characterIsAI: boolean;
    aiIsPolice: boolean;
    calledByPlayer: boolean;
    aiCounter: number;
    wantedLevel: number;
    colorList: any[];
    clothingStore: ClothingStore;
    shirt_obj: THREE.Object3D;
    sleeve_right: THREE.Object3D;
    sleeve_left: THREE.Object3D;
    pants_left: THREE.Object3D;
    pants_right: THREE.Object3D;
    vest_obj: THREE.Object3D;
    mask_obj: THREE.Object3D;
    headset_obj: THREE.Object3D;
    active_shirt: THREE.Object3D;
    active_sleeve_right: THREE.Object3D;
    active_sleeve_left: THREE.Object3D;
    active_pants_left: THREE.Object3D;
    active_pants_right: THREE.Object3D;
    active_vest: THREE.Object3D;
    active_mask: THREE.Object3D;
    active_headset: THREE.Object3D;
    active_shirt_color: any;
    active_pants_color: any;
    active_vest_color: any;
    active_mask_color: any;
    active_headset_color: any;
    wantsToInteract: boolean;
    wantsToCriminal: boolean;
    onHeist: boolean;
    storeDisplay: any;
    money: number;
    isAiming: boolean;
    cameraShoulder: THREE.Object3D;
    raycasterShot: THREE.Raycaster;
    health: number;
    hasDied: boolean;
    justGotShot: boolean;
    isStraving: boolean;
    weapons: any[];
    equipedWeapon: any;
    ammo: number;
    shotgunAmmo: number;
    ammoInventory: number;
    smg: any;
    knife: any;
    smgCapacity: number;
    shotgunCapacity: number;
    pistol: any;
    shotgun: any;
    remoteC4: any;
    c4Model: any;
    placedExplosives: any[];
    weaponSlot: number;
    headCollider: THREE.Object3D;
    chestCollider: THREE.Object3D;
    vitals: any;
    balanceUI: any;
    ammoUI: any;
    openedChute: boolean;
    private physicsEnabled;
    mission: Mission;
    onMission: boolean;
    skinMat1: THREE.Material;
    skinMat2: THREE.Material;
    hairMat: THREE.Material;
    switched: boolean;
    objectsExceptSelf: any[];
    particleThe: any;
    deathCount: number;
    interactedAmount: number;
    shootingPoint: THREE.Object3D;
    body_lower_bone: any;
    arm_upperL_bone: any;
    arm_upperR_bone: any;
    registered: boolean;
    basketball: THREE.Object3D;
    shotAudio: any;
    shotEndAudio: any;
    reloadAudio: any;
    noAmmoAudio: any;
    fallingAudio: any;
    hitLandAudio: any;
    equipAmmoAudio: any;
    shotgunShootAudio: any;
    shotgunReloadAudio: any;
    foundAudio: boolean;
    inBlastRadius: boolean;
    zombieAudioList: any[];
    zombieAudio1: any;
    zombieAudio2: any;
    zombieAudio3: any;
    zombieBite: any;
    detonZombieAudio: any;
    characterType: any;
    zombieRole: any;
    bulletHitGrass: any;
    networkPlayer: boolean;
    constructor(gltf: any);
    setAnimations(animations: []): void;
    setArcadeVelocityInfluence(x: number, y?: number, z?: number): void;
    setViewVector(vector: THREE.Vector3): void;
    /**
     * Set state to the player. Pass state class (function) name.
     * @param {function} State
     */
    setState(state: ICharacterState): void;
    setPosition(x: number, y: number, z: number): void;
    resetVelocity(): void;
    toggleChat(): void;
    createParticleSystem(selObj: any): void;
    setArcadeVelocityTarget(velZ: number, velX?: number, velY?: number): void;
    setOrientation(vector: THREE.Vector3, instantly?: boolean): void;
    resetOrientation(): void;
    setBehaviour(behaviour: ICharacterAI): void;
    setPhysicsEnabled(value: boolean): void;
    randomBoolean(): boolean;
    readCharacterData(gltf: any): void;
    handleKeyboardEvent(event: KeyboardEvent, code: string, pressed: boolean): void;
    handleMouseButton(event: MouseEvent, code: string, pressed: boolean): void;
    handleMouseMove(event: MouseEvent, deltaX: number, deltaY: number): void;
    handleMouseWheel(event: WheelEvent, value: number): void;
    triggerAction(actionName: string, value: boolean): void;
    takeControl(): void;
    resetControls(): void;
    animateValue(start: any, end: any, duration: any): void;
    updateUI(): void;
    autoReGen(): void;
    respawnWhenDied(): void;
    initPlayerDied(): void;
    changeActiveClothes(obj: string, color: string, price: number): void;
    previewClothes(isOver: boolean, obj: string, color: string): void;
    initMission(): void;
    lookForInteractable(): void;
    update(timeStep: number): void;
    inputReceiverInit(): void;
    displayControls(): void;
    inputReceiverUpdate(timeStep: number): void;
    setAnimation(clipName: string, fadeIn: number): number;
    springMovement(timeStep: number): void;
    springRotation(timeStep: number): void;
    getLocalMovementDirection(): THREE.Vector3;
    getCameraRelativeMovementVector(): THREE.Vector3;
    setCameraRelativeOrientationTarget(): void;
    rotateModel(): void;
    jump(initJumpSpeed?: number): void;
    aimWeapon(): void;
    randomChoice(arr: any): void;
    manageWantedLevel(wantedLevel: any): void;
    reloadGun(weaponType: string): void;
    shootShotgunAI(): void;
    shootShotgun(): void;
    shootGun(): void;
    shootGunAI(): void;
    detonateExplosive(): void;
    placeExplosive(): void;
    openChute(): void;
    findAudioSource(): void;
    findVehicleToEnter(wantsToDrive: boolean): void;
    randomChance(): void;
    enterVehicle(seat: VehicleSeat, entryPoint: THREE.Object3D): void;
    teleportToVehicle(vehicle: Vehicle, seat: VehicleSeat): void;
    startControllingVehicle(vehicle: IControllable, seat: VehicleSeat): void;
    transferControls(entity: IControllable): void;
    stopControllingVehicle(): void;
    exitVehicle(): void;
    occupySeat(seat: VehicleSeat): void;
    leaveSeat(): void;
    physicsPreStep(body: CANNON.Body, character: Character): void;
    weaponHandler(): void;
    updateWeaponSlot(): void;
    feetRaycast(): void;
    physicsPostStep(body: CANNON.Body, character: Character): void;
    enterApartment(): void;
    addToWorld(world: World): void;
    removeFromWorld(world: World): void;
}
